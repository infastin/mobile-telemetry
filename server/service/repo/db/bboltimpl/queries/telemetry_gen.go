package queries

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TelemetryValueV1) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "user_id":
			err = dc.ReadExactBytes((z.UserID)[:])
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "device_id":
			z.DeviceID, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "DeviceID")
				return
			}
		case "os_version":
			z.OSVersion, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OSVersion")
				return
			}
		case "app_version":
			z.AppVersion, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AppVersion")
				return
			}
		case "action":
			z.Action, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "data":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string]interface{}, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0003 string
				var za0004 interface{}
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				za0004, err = dc.ReadIntf()
				if err != nil {
					err = msgp.WrapError(err, "Data", za0003)
					return
				}
				z.Data[za0003] = za0004
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TelemetryValueV1) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "user_id"
	err = en.Append(0x87, 0xa7, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.UserID)[:])
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "device_id"
	err = en.Append(0xa9, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DeviceID)
	if err != nil {
		err = msgp.WrapError(err, "DeviceID")
		return
	}
	// write "os_version"
	err = en.Append(0xaa, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.OSVersion)
	if err != nil {
		err = msgp.WrapError(err, "OSVersion")
		return
	}
	// write "app_version"
	err = en.Append(0xab, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.AppVersion)
	if err != nil {
		err = msgp.WrapError(err, "AppVersion")
		return
	}
	// write "action"
	err = en.Append(0xa6, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Data)))
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	for za0003, za0004 := range z.Data {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Data")
			return
		}
		err = en.WriteIntf(za0004)
		if err != nil {
			err = msgp.WrapError(err, "Data", za0003)
			return
		}
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TelemetryValueV1) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "user_id"
	o = append(o, 0x87, 0xa7, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64)
	o = msgp.AppendBytes(o, (z.UserID)[:])
	// string "device_id"
	o = append(o, 0xa9, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64)
	o = msgp.AppendUint64(o, z.DeviceID)
	// string "os_version"
	o = append(o, 0xaa, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.OSVersion)
	// string "app_version"
	o = append(o, 0xab, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.AppVersion)
	// string "action"
	o = append(o, 0xa6, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Action)
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.Data)))
	for za0003, za0004 := range z.Data {
		o = msgp.AppendString(o, za0003)
		o, err = msgp.AppendIntf(o, za0004)
		if err != nil {
			err = msgp.WrapError(err, "Data", za0003)
			return
		}
	}
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendTime(o, z.Timestamp)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TelemetryValueV1) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "user_id":
			bts, err = msgp.ReadExactBytes(bts, (z.UserID)[:])
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "device_id":
			z.DeviceID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeviceID")
				return
			}
		case "os_version":
			z.OSVersion, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OSVersion")
				return
			}
		case "app_version":
			z.AppVersion, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AppVersion")
				return
			}
		case "action":
			z.Action, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		case "data":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			if z.Data == nil {
				z.Data = make(map[string]interface{}, zb0002)
			} else if len(z.Data) > 0 {
				for key := range z.Data {
					delete(z.Data, key)
				}
			}
			for zb0002 > 0 {
				var za0003 string
				var za0004 interface{}
				zb0002--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				za0004, bts, err = msgp.ReadIntfBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data", za0003)
					return
				}
				z.Data[za0003] = za0004
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TelemetryValueV1) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize + (16 * (msgp.ByteSize)) + 10 + msgp.Uint64Size + 11 + msgp.StringPrefixSize + len(z.OSVersion) + 12 + msgp.StringPrefixSize + len(z.AppVersion) + 7 + msgp.StringPrefixSize + len(z.Action) + 5 + msgp.MapHeaderSize
	if z.Data != nil {
		for za0003, za0004 := range z.Data {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.GuessSize(za0004)
		}
	}
	s += 10 + msgp.TimeSize
	return
}
