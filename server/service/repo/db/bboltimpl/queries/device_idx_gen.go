package queries

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DeviceIndexValue) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "manufacturer":
			z.Manufacturer, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Manufacturer")
				return
			}
		case "model":
			z.Model, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Model")
				return
			}
		case "build_number":
			z.BuildNumber, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "BuildNumber")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DeviceIndexValue) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "manufacturer"
	err = en.Append(0x83, 0xac, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Manufacturer)
	if err != nil {
		err = msgp.WrapError(err, "Manufacturer")
		return
	}
	// write "model"
	err = en.Append(0xa5, 0x6d, 0x6f, 0x64, 0x65, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Model)
	if err != nil {
		err = msgp.WrapError(err, "Model")
		return
	}
	// write "build_number"
	err = en.Append(0xac, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.BuildNumber)
	if err != nil {
		err = msgp.WrapError(err, "BuildNumber")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DeviceIndexValue) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "manufacturer"
	o = append(o, 0x83, 0xac, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72)
	o = msgp.AppendString(o, z.Manufacturer)
	// string "model"
	o = append(o, 0xa5, 0x6d, 0x6f, 0x64, 0x65, 0x6c)
	o = msgp.AppendString(o, z.Model)
	// string "build_number"
	o = append(o, 0xac, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendString(o, z.BuildNumber)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeviceIndexValue) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "manufacturer":
			z.Manufacturer, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Manufacturer")
				return
			}
		case "model":
			z.Model, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Model")
				return
			}
		case "build_number":
			z.BuildNumber, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BuildNumber")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DeviceIndexValue) Msgsize() (s int) {
	s = 1 + 13 + msgp.StringPrefixSize + len(z.Manufacturer) + 6 + msgp.StringPrefixSize + len(z.Model) + 13 + msgp.StringPrefixSize + len(z.BuildNumber)
	return
}
