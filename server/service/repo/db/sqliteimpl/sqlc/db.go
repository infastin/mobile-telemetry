// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.findDeviceStmt, err = db.PrepareContext(ctx, findDevice); err != nil {
		return nil, fmt.Errorf("error preparing query FindDevice: %w", err)
	}
	if q.insertDeviceStmt, err = db.PrepareContext(ctx, insertDevice); err != nil {
		return nil, fmt.Errorf("error preparing query InsertDevice: %w", err)
	}
	if q.insertTelemetryStmt, err = db.PrepareContext(ctx, insertTelemetry); err != nil {
		return nil, fmt.Errorf("error preparing query InsertTelemetry: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.insertUserDeviceIfNotExistsStmt, err = db.PrepareContext(ctx, insertUserDeviceIfNotExists); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUserDeviceIfNotExists: %w", err)
	}
	if q.upsertDeviceStmt, err = db.PrepareContext(ctx, upsertDevice); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertDevice: %w", err)
	}
	if q.upsertUserStmt, err = db.PrepareContext(ctx, upsertUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.findDeviceStmt != nil {
		if cerr := q.findDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findDeviceStmt: %w", cerr)
		}
	}
	if q.insertDeviceStmt != nil {
		if cerr := q.insertDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertDeviceStmt: %w", cerr)
		}
	}
	if q.insertTelemetryStmt != nil {
		if cerr := q.insertTelemetryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertTelemetryStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.insertUserDeviceIfNotExistsStmt != nil {
		if cerr := q.insertUserDeviceIfNotExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserDeviceIfNotExistsStmt: %w", cerr)
		}
	}
	if q.upsertDeviceStmt != nil {
		if cerr := q.upsertDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertDeviceStmt: %w", cerr)
		}
	}
	if q.upsertUserStmt != nil {
		if cerr := q.upsertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	findDeviceStmt                  *sql.Stmt
	insertDeviceStmt                *sql.Stmt
	insertTelemetryStmt             *sql.Stmt
	insertUserStmt                  *sql.Stmt
	insertUserDeviceIfNotExistsStmt *sql.Stmt
	upsertDeviceStmt                *sql.Stmt
	upsertUserStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		findDeviceStmt:                  q.findDeviceStmt,
		insertDeviceStmt:                q.insertDeviceStmt,
		insertTelemetryStmt:             q.insertTelemetryStmt,
		insertUserStmt:                  q.insertUserStmt,
		insertUserDeviceIfNotExistsStmt: q.insertUserDeviceIfNotExistsStmt,
		upsertDeviceStmt:                q.upsertDeviceStmt,
		upsertUserStmt:                  q.upsertUserStmt,
	}
}
