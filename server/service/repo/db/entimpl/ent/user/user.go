// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeDevices holds the string denoting the devices edge name in mutations.
	EdgeDevices = "devices"
	// EdgeTelemetries holds the string denoting the telemetries edge name in mutations.
	EdgeTelemetries = "telemetries"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DevicesTable is the table that holds the devices relation/edge. The primary key declared below.
	DevicesTable = "user_devices"
	// DevicesInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DevicesInverseTable = "devices"
	// TelemetriesTable is the table that holds the telemetries relation/edge.
	TelemetriesTable = "telemetries"
	// TelemetriesInverseTable is the table name for the Telemetry entity.
	// It exists in this package in order to avoid circular dependency with the "telemetry" package.
	TelemetriesInverseTable = "telemetries"
	// TelemetriesColumn is the table column denoting the telemetries relation/edge.
	TelemetriesColumn = "user_telemetries"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
}

var (
	// DevicesPrimaryKey and DevicesColumn2 are the table columns denoting the
	// primary key for the devices relation (M2M).
	DevicesPrimaryKey = []string{"user_id", "device_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDevicesCount orders the results by devices count.
func ByDevicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDevicesStep(), opts...)
	}
}

// ByDevices orders the results by devices terms.
func ByDevices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDevicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTelemetriesCount orders the results by telemetries count.
func ByTelemetriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTelemetriesStep(), opts...)
	}
}

// ByTelemetries orders the results by telemetries terms.
func ByTelemetries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTelemetriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDevicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DevicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DevicesTable, DevicesPrimaryKey...),
	)
}
func newTelemetriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TelemetriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TelemetriesTable, TelemetriesColumn),
	)
}
