// Code generated by ent, DO NOT EDIT.

package device

import (
	"mobile-telemetry/server/service/repo/db/entimpl/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldID, id))
}

// Manufacturer applies equality check predicate on the "manufacturer" field. It's identical to ManufacturerEQ.
func Manufacturer(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldManufacturer, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldModel, v))
}

// BuildNumber applies equality check predicate on the "build_number" field. It's identical to BuildNumberEQ.
func BuildNumber(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldBuildNumber, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldOs, v))
}

// ScreenWidth applies equality check predicate on the "screen_width" field. It's identical to ScreenWidthEQ.
func ScreenWidth(v uint32) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldScreenWidth, v))
}

// ScreenHeight applies equality check predicate on the "screen_height" field. It's identical to ScreenHeightEQ.
func ScreenHeight(v uint32) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldScreenHeight, v))
}

// ManufacturerEQ applies the EQ predicate on the "manufacturer" field.
func ManufacturerEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldManufacturer, v))
}

// ManufacturerNEQ applies the NEQ predicate on the "manufacturer" field.
func ManufacturerNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldManufacturer, v))
}

// ManufacturerIn applies the In predicate on the "manufacturer" field.
func ManufacturerIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldManufacturer, vs...))
}

// ManufacturerNotIn applies the NotIn predicate on the "manufacturer" field.
func ManufacturerNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldManufacturer, vs...))
}

// ManufacturerGT applies the GT predicate on the "manufacturer" field.
func ManufacturerGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldManufacturer, v))
}

// ManufacturerGTE applies the GTE predicate on the "manufacturer" field.
func ManufacturerGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldManufacturer, v))
}

// ManufacturerLT applies the LT predicate on the "manufacturer" field.
func ManufacturerLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldManufacturer, v))
}

// ManufacturerLTE applies the LTE predicate on the "manufacturer" field.
func ManufacturerLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldManufacturer, v))
}

// ManufacturerContains applies the Contains predicate on the "manufacturer" field.
func ManufacturerContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldManufacturer, v))
}

// ManufacturerHasPrefix applies the HasPrefix predicate on the "manufacturer" field.
func ManufacturerHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldManufacturer, v))
}

// ManufacturerHasSuffix applies the HasSuffix predicate on the "manufacturer" field.
func ManufacturerHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldManufacturer, v))
}

// ManufacturerEqualFold applies the EqualFold predicate on the "manufacturer" field.
func ManufacturerEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldManufacturer, v))
}

// ManufacturerContainsFold applies the ContainsFold predicate on the "manufacturer" field.
func ManufacturerContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldManufacturer, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldModel, v))
}

// BuildNumberEQ applies the EQ predicate on the "build_number" field.
func BuildNumberEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldBuildNumber, v))
}

// BuildNumberNEQ applies the NEQ predicate on the "build_number" field.
func BuildNumberNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldBuildNumber, v))
}

// BuildNumberIn applies the In predicate on the "build_number" field.
func BuildNumberIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldBuildNumber, vs...))
}

// BuildNumberNotIn applies the NotIn predicate on the "build_number" field.
func BuildNumberNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldBuildNumber, vs...))
}

// BuildNumberGT applies the GT predicate on the "build_number" field.
func BuildNumberGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldBuildNumber, v))
}

// BuildNumberGTE applies the GTE predicate on the "build_number" field.
func BuildNumberGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldBuildNumber, v))
}

// BuildNumberLT applies the LT predicate on the "build_number" field.
func BuildNumberLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldBuildNumber, v))
}

// BuildNumberLTE applies the LTE predicate on the "build_number" field.
func BuildNumberLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldBuildNumber, v))
}

// BuildNumberContains applies the Contains predicate on the "build_number" field.
func BuildNumberContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldBuildNumber, v))
}

// BuildNumberHasPrefix applies the HasPrefix predicate on the "build_number" field.
func BuildNumberHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldBuildNumber, v))
}

// BuildNumberHasSuffix applies the HasSuffix predicate on the "build_number" field.
func BuildNumberHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldBuildNumber, v))
}

// BuildNumberEqualFold applies the EqualFold predicate on the "build_number" field.
func BuildNumberEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldBuildNumber, v))
}

// BuildNumberContainsFold applies the ContainsFold predicate on the "build_number" field.
func BuildNumberContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldBuildNumber, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldOs, v))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldOs, v))
}

// ScreenWidthEQ applies the EQ predicate on the "screen_width" field.
func ScreenWidthEQ(v uint32) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldScreenWidth, v))
}

// ScreenWidthNEQ applies the NEQ predicate on the "screen_width" field.
func ScreenWidthNEQ(v uint32) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldScreenWidth, v))
}

// ScreenWidthIn applies the In predicate on the "screen_width" field.
func ScreenWidthIn(vs ...uint32) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldScreenWidth, vs...))
}

// ScreenWidthNotIn applies the NotIn predicate on the "screen_width" field.
func ScreenWidthNotIn(vs ...uint32) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldScreenWidth, vs...))
}

// ScreenWidthGT applies the GT predicate on the "screen_width" field.
func ScreenWidthGT(v uint32) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldScreenWidth, v))
}

// ScreenWidthGTE applies the GTE predicate on the "screen_width" field.
func ScreenWidthGTE(v uint32) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldScreenWidth, v))
}

// ScreenWidthLT applies the LT predicate on the "screen_width" field.
func ScreenWidthLT(v uint32) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldScreenWidth, v))
}

// ScreenWidthLTE applies the LTE predicate on the "screen_width" field.
func ScreenWidthLTE(v uint32) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldScreenWidth, v))
}

// ScreenHeightEQ applies the EQ predicate on the "screen_height" field.
func ScreenHeightEQ(v uint32) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldScreenHeight, v))
}

// ScreenHeightNEQ applies the NEQ predicate on the "screen_height" field.
func ScreenHeightNEQ(v uint32) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldScreenHeight, v))
}

// ScreenHeightIn applies the In predicate on the "screen_height" field.
func ScreenHeightIn(vs ...uint32) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldScreenHeight, vs...))
}

// ScreenHeightNotIn applies the NotIn predicate on the "screen_height" field.
func ScreenHeightNotIn(vs ...uint32) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldScreenHeight, vs...))
}

// ScreenHeightGT applies the GT predicate on the "screen_height" field.
func ScreenHeightGT(v uint32) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldScreenHeight, v))
}

// ScreenHeightGTE applies the GTE predicate on the "screen_height" field.
func ScreenHeightGTE(v uint32) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldScreenHeight, v))
}

// ScreenHeightLT applies the LT predicate on the "screen_height" field.
func ScreenHeightLT(v uint32) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldScreenHeight, v))
}

// ScreenHeightLTE applies the LTE predicate on the "screen_height" field.
func ScreenHeightLTE(v uint32) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldScreenHeight, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTelemetries applies the HasEdge predicate on the "telemetries" edge.
func HasTelemetries() predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TelemetriesTable, TelemetriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTelemetriesWith applies the HasEdge predicate on the "telemetries" edge with a given conditions (other predicates).
func HasTelemetriesWith(preds ...predicate.Telemetry) predicate.Device {
	return predicate.Device(func(s *sql.Selector) {
		step := newTelemetriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Device) predicate.Device {
	return predicate.Device(sql.NotPredicates(p))
}
