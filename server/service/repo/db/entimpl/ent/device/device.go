// Code generated by ent, DO NOT EDIT.

package device

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the device type in the database.
	Label = "device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldManufacturer holds the string denoting the manufacturer field in the database.
	FieldManufacturer = "manufacturer"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldBuildNumber holds the string denoting the build_number field in the database.
	FieldBuildNumber = "build_number"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldScreenWidth holds the string denoting the screen_width field in the database.
	FieldScreenWidth = "screen_width"
	// FieldScreenHeight holds the string denoting the screen_height field in the database.
	FieldScreenHeight = "screen_height"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTelemetries holds the string denoting the telemetries edge name in mutations.
	EdgeTelemetries = "telemetries"
	// Table holds the table name of the device in the database.
	Table = "devices"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_devices"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// TelemetriesTable is the table that holds the telemetries relation/edge.
	TelemetriesTable = "telemetries"
	// TelemetriesInverseTable is the table name for the Telemetry entity.
	// It exists in this package in order to avoid circular dependency with the "telemetry" package.
	TelemetriesInverseTable = "telemetries"
	// TelemetriesColumn is the table column denoting the telemetries relation/edge.
	TelemetriesColumn = "device_telemetries"
)

// Columns holds all SQL columns for device fields.
var Columns = []string{
	FieldID,
	FieldManufacturer,
	FieldModel,
	FieldBuildNumber,
	FieldOs,
	FieldScreenWidth,
	FieldScreenHeight,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user_id", "device_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Device queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByManufacturer orders the results by the manufacturer field.
func ByManufacturer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManufacturer, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByBuildNumber orders the results by the build_number field.
func ByBuildNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildNumber, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByScreenWidth orders the results by the screen_width field.
func ByScreenWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScreenWidth, opts...).ToFunc()
}

// ByScreenHeight orders the results by the screen_height field.
func ByScreenHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScreenHeight, opts...).ToFunc()
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTelemetriesCount orders the results by telemetries count.
func ByTelemetriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTelemetriesStep(), opts...)
	}
}

// ByTelemetries orders the results by telemetries terms.
func ByTelemetries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTelemetriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newTelemetriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TelemetriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TelemetriesTable, TelemetriesColumn),
	)
}
