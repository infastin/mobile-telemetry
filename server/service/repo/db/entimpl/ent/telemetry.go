// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/device"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/telemetry"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Telemetry is the model entity for the Telemetry schema.
type Telemetry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AppVersion holds the value of the "app_version" field.
	AppVersion string `json:"app_version,omitempty"`
	// OsVersion holds the value of the "os_version" field.
	OsVersion string `json:"os_version,omitempty"`
	// ActionType holds the value of the "action_type" field.
	ActionType string `json:"action_type,omitempty"`
	// ActionData holds the value of the "action_data" field.
	ActionData map[string]interface{} `json:"action_data,omitempty"`
	// ActionAt holds the value of the "action_at" field.
	ActionAt time.Time `json:"action_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TelemetryQuery when eager-loading is set.
	Edges              TelemetryEdges `json:"edges"`
	device_telemetries *int
	user_telemetries   *uuid.UUID
	selectValues       sql.SelectValues
}

// TelemetryEdges holds the relations/edges for other nodes in the graph.
type TelemetryEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Device holds the value of the device edge.
	Device *Device `json:"device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelemetryEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DeviceOrErr returns the Device value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelemetryEdges) DeviceOrErr() (*Device, error) {
	if e.Device != nil {
		return e.Device, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: device.Label}
	}
	return nil, &NotLoadedError{edge: "device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Telemetry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telemetry.FieldActionData:
			values[i] = new([]byte)
		case telemetry.FieldID:
			values[i] = new(sql.NullInt64)
		case telemetry.FieldAppVersion, telemetry.FieldOsVersion, telemetry.FieldActionType:
			values[i] = new(sql.NullString)
		case telemetry.FieldActionAt:
			values[i] = new(sql.NullTime)
		case telemetry.ForeignKeys[0]: // device_telemetries
			values[i] = new(sql.NullInt64)
		case telemetry.ForeignKeys[1]: // user_telemetries
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Telemetry fields.
func (t *Telemetry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telemetry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case telemetry.FieldAppVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_version", values[i])
			} else if value.Valid {
				t.AppVersion = value.String
			}
		case telemetry.FieldOsVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_version", values[i])
			} else if value.Valid {
				t.OsVersion = value.String
			}
		case telemetry.FieldActionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_type", values[i])
			} else if value.Valid {
				t.ActionType = value.String
			}
		case telemetry.FieldActionData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field action_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.ActionData); err != nil {
					return fmt.Errorf("unmarshal field action_data: %w", err)
				}
			}
		case telemetry.FieldActionAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field action_at", values[i])
			} else if value.Valid {
				t.ActionAt = value.Time
			}
		case telemetry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field device_telemetries", value)
			} else if value.Valid {
				t.device_telemetries = new(int)
				*t.device_telemetries = int(value.Int64)
			}
		case telemetry.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_telemetries", values[i])
			} else if value.Valid {
				t.user_telemetries = new(uuid.UUID)
				*t.user_telemetries = *value.S.(*uuid.UUID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Telemetry.
// This includes values selected through modifiers, order, etc.
func (t *Telemetry) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Telemetry entity.
func (t *Telemetry) QueryUser() *UserQuery {
	return NewTelemetryClient(t.config).QueryUser(t)
}

// QueryDevice queries the "device" edge of the Telemetry entity.
func (t *Telemetry) QueryDevice() *DeviceQuery {
	return NewTelemetryClient(t.config).QueryDevice(t)
}

// Update returns a builder for updating this Telemetry.
// Note that you need to call Telemetry.Unwrap() before calling this method if this Telemetry
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Telemetry) Update() *TelemetryUpdateOne {
	return NewTelemetryClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Telemetry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Telemetry) Unwrap() *Telemetry {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Telemetry is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Telemetry) String() string {
	var builder strings.Builder
	builder.WriteString("Telemetry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("app_version=")
	builder.WriteString(t.AppVersion)
	builder.WriteString(", ")
	builder.WriteString("os_version=")
	builder.WriteString(t.OsVersion)
	builder.WriteString(", ")
	builder.WriteString("action_type=")
	builder.WriteString(t.ActionType)
	builder.WriteString(", ")
	builder.WriteString("action_data=")
	builder.WriteString(fmt.Sprintf("%v", t.ActionData))
	builder.WriteString(", ")
	builder.WriteString("action_at=")
	builder.WriteString(t.ActionAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Telemetries is a parsable slice of Telemetry.
type Telemetries []*Telemetry
