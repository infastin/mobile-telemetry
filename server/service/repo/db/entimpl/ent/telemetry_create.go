// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/device"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/telemetry"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TelemetryCreate is the builder for creating a Telemetry entity.
type TelemetryCreate struct {
	config
	mutation *TelemetryMutation
	hooks    []Hook
}

// SetAppVersion sets the "app_version" field.
func (tc *TelemetryCreate) SetAppVersion(s string) *TelemetryCreate {
	tc.mutation.SetAppVersion(s)
	return tc
}

// SetOsVersion sets the "os_version" field.
func (tc *TelemetryCreate) SetOsVersion(s string) *TelemetryCreate {
	tc.mutation.SetOsVersion(s)
	return tc
}

// SetActionType sets the "action_type" field.
func (tc *TelemetryCreate) SetActionType(s string) *TelemetryCreate {
	tc.mutation.SetActionType(s)
	return tc
}

// SetActionData sets the "action_data" field.
func (tc *TelemetryCreate) SetActionData(m map[string]interface{}) *TelemetryCreate {
	tc.mutation.SetActionData(m)
	return tc
}

// SetActionAt sets the "action_at" field.
func (tc *TelemetryCreate) SetActionAt(t time.Time) *TelemetryCreate {
	tc.mutation.SetActionAt(t)
	return tc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (tc *TelemetryCreate) SetUserID(id uuid.UUID) *TelemetryCreate {
	tc.mutation.SetUserID(id)
	return tc
}

// SetUser sets the "user" edge to the User entity.
func (tc *TelemetryCreate) SetUser(u *User) *TelemetryCreate {
	return tc.SetUserID(u.ID)
}

// SetDeviceID sets the "device" edge to the Device entity by ID.
func (tc *TelemetryCreate) SetDeviceID(id int) *TelemetryCreate {
	tc.mutation.SetDeviceID(id)
	return tc
}

// SetDevice sets the "device" edge to the Device entity.
func (tc *TelemetryCreate) SetDevice(d *Device) *TelemetryCreate {
	return tc.SetDeviceID(d.ID)
}

// Mutation returns the TelemetryMutation object of the builder.
func (tc *TelemetryCreate) Mutation() *TelemetryMutation {
	return tc.mutation
}

// Save creates the Telemetry in the database.
func (tc *TelemetryCreate) Save(ctx context.Context) (*Telemetry, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TelemetryCreate) SaveX(ctx context.Context) *Telemetry {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TelemetryCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TelemetryCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TelemetryCreate) check() error {
	if _, ok := tc.mutation.AppVersion(); !ok {
		return &ValidationError{Name: "app_version", err: errors.New(`ent: missing required field "Telemetry.app_version"`)}
	}
	if _, ok := tc.mutation.OsVersion(); !ok {
		return &ValidationError{Name: "os_version", err: errors.New(`ent: missing required field "Telemetry.os_version"`)}
	}
	if _, ok := tc.mutation.ActionType(); !ok {
		return &ValidationError{Name: "action_type", err: errors.New(`ent: missing required field "Telemetry.action_type"`)}
	}
	if _, ok := tc.mutation.ActionData(); !ok {
		return &ValidationError{Name: "action_data", err: errors.New(`ent: missing required field "Telemetry.action_data"`)}
	}
	if _, ok := tc.mutation.ActionAt(); !ok {
		return &ValidationError{Name: "action_at", err: errors.New(`ent: missing required field "Telemetry.action_at"`)}
	}
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Telemetry.user"`)}
	}
	if _, ok := tc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required edge "Telemetry.device"`)}
	}
	return nil
}

func (tc *TelemetryCreate) sqlSave(ctx context.Context) (*Telemetry, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TelemetryCreate) createSpec() (*Telemetry, *sqlgraph.CreateSpec) {
	var (
		_node = &Telemetry{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(telemetry.Table, sqlgraph.NewFieldSpec(telemetry.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.AppVersion(); ok {
		_spec.SetField(telemetry.FieldAppVersion, field.TypeString, value)
		_node.AppVersion = value
	}
	if value, ok := tc.mutation.OsVersion(); ok {
		_spec.SetField(telemetry.FieldOsVersion, field.TypeString, value)
		_node.OsVersion = value
	}
	if value, ok := tc.mutation.ActionType(); ok {
		_spec.SetField(telemetry.FieldActionType, field.TypeString, value)
		_node.ActionType = value
	}
	if value, ok := tc.mutation.ActionData(); ok {
		_spec.SetField(telemetry.FieldActionData, field.TypeJSON, value)
		_node.ActionData = value
	}
	if value, ok := tc.mutation.ActionAt(); ok {
		_spec.SetField(telemetry.FieldActionAt, field.TypeTime, value)
		_node.ActionAt = value
	}
	if nodes := tc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   telemetry.UserTable,
			Columns: []string{telemetry.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_telemetries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   telemetry.DeviceTable,
			Columns: []string{telemetry.DeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.device_telemetries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TelemetryCreateBulk is the builder for creating many Telemetry entities in bulk.
type TelemetryCreateBulk struct {
	config
	err      error
	builders []*TelemetryCreate
}

// Save creates the Telemetry entities in the database.
func (tcb *TelemetryCreateBulk) Save(ctx context.Context) ([]*Telemetry, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Telemetry, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelemetryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TelemetryCreateBulk) SaveX(ctx context.Context) []*Telemetry {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TelemetryCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TelemetryCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
