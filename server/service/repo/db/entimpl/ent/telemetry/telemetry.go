// Code generated by ent, DO NOT EDIT.

package telemetry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the telemetry type in the database.
	Label = "telemetry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAppVersion holds the string denoting the app_version field in the database.
	FieldAppVersion = "app_version"
	// FieldOsVersion holds the string denoting the os_version field in the database.
	FieldOsVersion = "os_version"
	// FieldActionType holds the string denoting the action_type field in the database.
	FieldActionType = "action_type"
	// FieldActionData holds the string denoting the action_data field in the database.
	FieldActionData = "action_data"
	// FieldActionAt holds the string denoting the action_at field in the database.
	FieldActionAt = "action_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeDevice holds the string denoting the device edge name in mutations.
	EdgeDevice = "device"
	// Table holds the table name of the telemetry in the database.
	Table = "telemetries"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "telemetries"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_telemetries"
	// DeviceTable is the table that holds the device relation/edge.
	DeviceTable = "telemetries"
	// DeviceInverseTable is the table name for the Device entity.
	// It exists in this package in order to avoid circular dependency with the "device" package.
	DeviceInverseTable = "devices"
	// DeviceColumn is the table column denoting the device relation/edge.
	DeviceColumn = "device_telemetries"
)

// Columns holds all SQL columns for telemetry fields.
var Columns = []string{
	FieldID,
	FieldAppVersion,
	FieldOsVersion,
	FieldActionType,
	FieldActionData,
	FieldActionAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "telemetries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"device_telemetries",
	"user_telemetries",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Telemetry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAppVersion orders the results by the app_version field.
func ByAppVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppVersion, opts...).ToFunc()
}

// ByOsVersion orders the results by the os_version field.
func ByOsVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsVersion, opts...).ToFunc()
}

// ByActionType orders the results by the action_type field.
func ByActionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionType, opts...).ToFunc()
}

// ByActionAt orders the results by the action_at field.
func ByActionAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeviceField orders the results by device field.
func ByDeviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeviceStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
	)
}
