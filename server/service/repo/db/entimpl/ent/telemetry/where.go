// Code generated by ent, DO NOT EDIT.

package telemetry

import (
	"mobile-telemetry/server/service/repo/db/entimpl/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLTE(FieldID, id))
}

// AppVersion applies equality check predicate on the "app_version" field. It's identical to AppVersionEQ.
func AppVersion(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldAppVersion, v))
}

// OsVersion applies equality check predicate on the "os_version" field. It's identical to OsVersionEQ.
func OsVersion(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldOsVersion, v))
}

// ActionType applies equality check predicate on the "action_type" field. It's identical to ActionTypeEQ.
func ActionType(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldActionType, v))
}

// ActionAt applies equality check predicate on the "action_at" field. It's identical to ActionAtEQ.
func ActionAt(v time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldActionAt, v))
}

// AppVersionEQ applies the EQ predicate on the "app_version" field.
func AppVersionEQ(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldAppVersion, v))
}

// AppVersionNEQ applies the NEQ predicate on the "app_version" field.
func AppVersionNEQ(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNEQ(FieldAppVersion, v))
}

// AppVersionIn applies the In predicate on the "app_version" field.
func AppVersionIn(vs ...string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldIn(FieldAppVersion, vs...))
}

// AppVersionNotIn applies the NotIn predicate on the "app_version" field.
func AppVersionNotIn(vs ...string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNotIn(FieldAppVersion, vs...))
}

// AppVersionGT applies the GT predicate on the "app_version" field.
func AppVersionGT(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGT(FieldAppVersion, v))
}

// AppVersionGTE applies the GTE predicate on the "app_version" field.
func AppVersionGTE(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGTE(FieldAppVersion, v))
}

// AppVersionLT applies the LT predicate on the "app_version" field.
func AppVersionLT(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLT(FieldAppVersion, v))
}

// AppVersionLTE applies the LTE predicate on the "app_version" field.
func AppVersionLTE(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLTE(FieldAppVersion, v))
}

// AppVersionContains applies the Contains predicate on the "app_version" field.
func AppVersionContains(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldContains(FieldAppVersion, v))
}

// AppVersionHasPrefix applies the HasPrefix predicate on the "app_version" field.
func AppVersionHasPrefix(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldHasPrefix(FieldAppVersion, v))
}

// AppVersionHasSuffix applies the HasSuffix predicate on the "app_version" field.
func AppVersionHasSuffix(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldHasSuffix(FieldAppVersion, v))
}

// AppVersionEqualFold applies the EqualFold predicate on the "app_version" field.
func AppVersionEqualFold(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEqualFold(FieldAppVersion, v))
}

// AppVersionContainsFold applies the ContainsFold predicate on the "app_version" field.
func AppVersionContainsFold(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldContainsFold(FieldAppVersion, v))
}

// OsVersionEQ applies the EQ predicate on the "os_version" field.
func OsVersionEQ(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldOsVersion, v))
}

// OsVersionNEQ applies the NEQ predicate on the "os_version" field.
func OsVersionNEQ(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNEQ(FieldOsVersion, v))
}

// OsVersionIn applies the In predicate on the "os_version" field.
func OsVersionIn(vs ...string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldIn(FieldOsVersion, vs...))
}

// OsVersionNotIn applies the NotIn predicate on the "os_version" field.
func OsVersionNotIn(vs ...string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNotIn(FieldOsVersion, vs...))
}

// OsVersionGT applies the GT predicate on the "os_version" field.
func OsVersionGT(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGT(FieldOsVersion, v))
}

// OsVersionGTE applies the GTE predicate on the "os_version" field.
func OsVersionGTE(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGTE(FieldOsVersion, v))
}

// OsVersionLT applies the LT predicate on the "os_version" field.
func OsVersionLT(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLT(FieldOsVersion, v))
}

// OsVersionLTE applies the LTE predicate on the "os_version" field.
func OsVersionLTE(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLTE(FieldOsVersion, v))
}

// OsVersionContains applies the Contains predicate on the "os_version" field.
func OsVersionContains(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldContains(FieldOsVersion, v))
}

// OsVersionHasPrefix applies the HasPrefix predicate on the "os_version" field.
func OsVersionHasPrefix(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldHasPrefix(FieldOsVersion, v))
}

// OsVersionHasSuffix applies the HasSuffix predicate on the "os_version" field.
func OsVersionHasSuffix(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldHasSuffix(FieldOsVersion, v))
}

// OsVersionEqualFold applies the EqualFold predicate on the "os_version" field.
func OsVersionEqualFold(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEqualFold(FieldOsVersion, v))
}

// OsVersionContainsFold applies the ContainsFold predicate on the "os_version" field.
func OsVersionContainsFold(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldContainsFold(FieldOsVersion, v))
}

// ActionTypeEQ applies the EQ predicate on the "action_type" field.
func ActionTypeEQ(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldActionType, v))
}

// ActionTypeNEQ applies the NEQ predicate on the "action_type" field.
func ActionTypeNEQ(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNEQ(FieldActionType, v))
}

// ActionTypeIn applies the In predicate on the "action_type" field.
func ActionTypeIn(vs ...string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldIn(FieldActionType, vs...))
}

// ActionTypeNotIn applies the NotIn predicate on the "action_type" field.
func ActionTypeNotIn(vs ...string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNotIn(FieldActionType, vs...))
}

// ActionTypeGT applies the GT predicate on the "action_type" field.
func ActionTypeGT(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGT(FieldActionType, v))
}

// ActionTypeGTE applies the GTE predicate on the "action_type" field.
func ActionTypeGTE(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGTE(FieldActionType, v))
}

// ActionTypeLT applies the LT predicate on the "action_type" field.
func ActionTypeLT(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLT(FieldActionType, v))
}

// ActionTypeLTE applies the LTE predicate on the "action_type" field.
func ActionTypeLTE(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLTE(FieldActionType, v))
}

// ActionTypeContains applies the Contains predicate on the "action_type" field.
func ActionTypeContains(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldContains(FieldActionType, v))
}

// ActionTypeHasPrefix applies the HasPrefix predicate on the "action_type" field.
func ActionTypeHasPrefix(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldHasPrefix(FieldActionType, v))
}

// ActionTypeHasSuffix applies the HasSuffix predicate on the "action_type" field.
func ActionTypeHasSuffix(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldHasSuffix(FieldActionType, v))
}

// ActionTypeEqualFold applies the EqualFold predicate on the "action_type" field.
func ActionTypeEqualFold(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEqualFold(FieldActionType, v))
}

// ActionTypeContainsFold applies the ContainsFold predicate on the "action_type" field.
func ActionTypeContainsFold(v string) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldContainsFold(FieldActionType, v))
}

// ActionAtEQ applies the EQ predicate on the "action_at" field.
func ActionAtEQ(v time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldEQ(FieldActionAt, v))
}

// ActionAtNEQ applies the NEQ predicate on the "action_at" field.
func ActionAtNEQ(v time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNEQ(FieldActionAt, v))
}

// ActionAtIn applies the In predicate on the "action_at" field.
func ActionAtIn(vs ...time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldIn(FieldActionAt, vs...))
}

// ActionAtNotIn applies the NotIn predicate on the "action_at" field.
func ActionAtNotIn(vs ...time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldNotIn(FieldActionAt, vs...))
}

// ActionAtGT applies the GT predicate on the "action_at" field.
func ActionAtGT(v time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGT(FieldActionAt, v))
}

// ActionAtGTE applies the GTE predicate on the "action_at" field.
func ActionAtGTE(v time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldGTE(FieldActionAt, v))
}

// ActionAtLT applies the LT predicate on the "action_at" field.
func ActionAtLT(v time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLT(FieldActionAt, v))
}

// ActionAtLTE applies the LTE predicate on the "action_at" field.
func ActionAtLTE(v time.Time) predicate.Telemetry {
	return predicate.Telemetry(sql.FieldLTE(FieldActionAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Telemetry {
	return predicate.Telemetry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Telemetry {
	return predicate.Telemetry(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDevice applies the HasEdge predicate on the "device" edge.
func HasDevice() predicate.Telemetry {
	return predicate.Telemetry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DeviceTable, DeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeviceWith applies the HasEdge predicate on the "device" edge with a given conditions (other predicates).
func HasDeviceWith(preds ...predicate.Device) predicate.Telemetry {
	return predicate.Telemetry(func(s *sql.Selector) {
		step := newDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Telemetry) predicate.Telemetry {
	return predicate.Telemetry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Telemetry) predicate.Telemetry {
	return predicate.Telemetry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Telemetry) predicate.Telemetry {
	return predicate.Telemetry(sql.NotPredicates(p))
}
