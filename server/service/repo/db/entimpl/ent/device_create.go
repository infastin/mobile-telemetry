// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/device"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/telemetry"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
}

// SetManufacturer sets the "manufacturer" field.
func (dc *DeviceCreate) SetManufacturer(s string) *DeviceCreate {
	dc.mutation.SetManufacturer(s)
	return dc
}

// SetModel sets the "model" field.
func (dc *DeviceCreate) SetModel(s string) *DeviceCreate {
	dc.mutation.SetModel(s)
	return dc
}

// SetBuildNumber sets the "build_number" field.
func (dc *DeviceCreate) SetBuildNumber(s string) *DeviceCreate {
	dc.mutation.SetBuildNumber(s)
	return dc
}

// SetOs sets the "os" field.
func (dc *DeviceCreate) SetOs(s string) *DeviceCreate {
	dc.mutation.SetOs(s)
	return dc
}

// SetScreenWidth sets the "screen_width" field.
func (dc *DeviceCreate) SetScreenWidth(u uint32) *DeviceCreate {
	dc.mutation.SetScreenWidth(u)
	return dc
}

// SetScreenHeight sets the "screen_height" field.
func (dc *DeviceCreate) SetScreenHeight(u uint32) *DeviceCreate {
	dc.mutation.SetScreenHeight(u)
	return dc
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (dc *DeviceCreate) AddUserIDs(ids ...uuid.UUID) *DeviceCreate {
	dc.mutation.AddUserIDs(ids...)
	return dc
}

// AddUser adds the "user" edges to the User entity.
func (dc *DeviceCreate) AddUser(u ...*User) *DeviceCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return dc.AddUserIDs(ids...)
}

// AddTelemetryIDs adds the "telemetries" edge to the Telemetry entity by IDs.
func (dc *DeviceCreate) AddTelemetryIDs(ids ...int) *DeviceCreate {
	dc.mutation.AddTelemetryIDs(ids...)
	return dc
}

// AddTelemetries adds the "telemetries" edges to the Telemetry entity.
func (dc *DeviceCreate) AddTelemetries(t ...*Telemetry) *DeviceCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dc.AddTelemetryIDs(ids...)
}

// Mutation returns the DeviceMutation object of the builder.
func (dc *DeviceCreate) Mutation() *DeviceMutation {
	return dc.mutation
}

// Save creates the Device in the database.
func (dc *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeviceCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeviceCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeviceCreate) check() error {
	if _, ok := dc.mutation.Manufacturer(); !ok {
		return &ValidationError{Name: "manufacturer", err: errors.New(`ent: missing required field "Device.manufacturer"`)}
	}
	if _, ok := dc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "Device.model"`)}
	}
	if _, ok := dc.mutation.BuildNumber(); !ok {
		return &ValidationError{Name: "build_number", err: errors.New(`ent: missing required field "Device.build_number"`)}
	}
	if _, ok := dc.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`ent: missing required field "Device.os"`)}
	}
	if _, ok := dc.mutation.ScreenWidth(); !ok {
		return &ValidationError{Name: "screen_width", err: errors.New(`ent: missing required field "Device.screen_width"`)}
	}
	if _, ok := dc.mutation.ScreenHeight(); !ok {
		return &ValidationError{Name: "screen_height", err: errors.New(`ent: missing required field "Device.screen_height"`)}
	}
	if len(dc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Device.user"`)}
	}
	return nil
}

func (dc *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec) {
	var (
		_node = &Device{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(device.Table, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.Manufacturer(); ok {
		_spec.SetField(device.FieldManufacturer, field.TypeString, value)
		_node.Manufacturer = value
	}
	if value, ok := dc.mutation.Model(); ok {
		_spec.SetField(device.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := dc.mutation.BuildNumber(); ok {
		_spec.SetField(device.FieldBuildNumber, field.TypeString, value)
		_node.BuildNumber = value
	}
	if value, ok := dc.mutation.Os(); ok {
		_spec.SetField(device.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := dc.mutation.ScreenWidth(); ok {
		_spec.SetField(device.FieldScreenWidth, field.TypeUint32, value)
		_node.ScreenWidth = value
	}
	if value, ok := dc.mutation.ScreenHeight(); ok {
		_spec.SetField(device.FieldScreenHeight, field.TypeUint32, value)
		_node.ScreenHeight = value
	}
	if nodes := dc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   device.UserTable,
			Columns: device.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.TelemetriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   device.TelemetriesTable,
			Columns: []string{device.TelemetriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeviceCreateBulk is the builder for creating many Device entities in bulk.
type DeviceCreateBulk struct {
	config
	err      error
	builders []*DeviceCreate
}

// Save creates the Device entities in the database.
func (dcb *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Device, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeviceCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
