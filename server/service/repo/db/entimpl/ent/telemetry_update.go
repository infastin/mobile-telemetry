// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/predicate"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/telemetry"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TelemetryUpdate is the builder for updating Telemetry entities.
type TelemetryUpdate struct {
	config
	hooks    []Hook
	mutation *TelemetryMutation
}

// Where appends a list predicates to the TelemetryUpdate builder.
func (tu *TelemetryUpdate) Where(ps ...predicate.Telemetry) *TelemetryUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAppVersion sets the "app_version" field.
func (tu *TelemetryUpdate) SetAppVersion(s string) *TelemetryUpdate {
	tu.mutation.SetAppVersion(s)
	return tu
}

// SetNillableAppVersion sets the "app_version" field if the given value is not nil.
func (tu *TelemetryUpdate) SetNillableAppVersion(s *string) *TelemetryUpdate {
	if s != nil {
		tu.SetAppVersion(*s)
	}
	return tu
}

// SetOsVersion sets the "os_version" field.
func (tu *TelemetryUpdate) SetOsVersion(s string) *TelemetryUpdate {
	tu.mutation.SetOsVersion(s)
	return tu
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (tu *TelemetryUpdate) SetNillableOsVersion(s *string) *TelemetryUpdate {
	if s != nil {
		tu.SetOsVersion(*s)
	}
	return tu
}

// SetActionType sets the "action_type" field.
func (tu *TelemetryUpdate) SetActionType(s string) *TelemetryUpdate {
	tu.mutation.SetActionType(s)
	return tu
}

// SetNillableActionType sets the "action_type" field if the given value is not nil.
func (tu *TelemetryUpdate) SetNillableActionType(s *string) *TelemetryUpdate {
	if s != nil {
		tu.SetActionType(*s)
	}
	return tu
}

// SetActionData sets the "action_data" field.
func (tu *TelemetryUpdate) SetActionData(m map[string]interface{}) *TelemetryUpdate {
	tu.mutation.SetActionData(m)
	return tu
}

// SetActionAt sets the "action_at" field.
func (tu *TelemetryUpdate) SetActionAt(t time.Time) *TelemetryUpdate {
	tu.mutation.SetActionAt(t)
	return tu
}

// SetNillableActionAt sets the "action_at" field if the given value is not nil.
func (tu *TelemetryUpdate) SetNillableActionAt(t *time.Time) *TelemetryUpdate {
	if t != nil {
		tu.SetActionAt(*t)
	}
	return tu
}

// Mutation returns the TelemetryMutation object of the builder.
func (tu *TelemetryUpdate) Mutation() *TelemetryMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TelemetryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TelemetryUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TelemetryUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TelemetryUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TelemetryUpdate) check() error {
	if _, ok := tu.mutation.UserID(); tu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Telemetry.user"`)
	}
	if _, ok := tu.mutation.DeviceID(); tu.mutation.DeviceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Telemetry.device"`)
	}
	return nil
}

func (tu *TelemetryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(telemetry.Table, telemetry.Columns, sqlgraph.NewFieldSpec(telemetry.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.AppVersion(); ok {
		_spec.SetField(telemetry.FieldAppVersion, field.TypeString, value)
	}
	if value, ok := tu.mutation.OsVersion(); ok {
		_spec.SetField(telemetry.FieldOsVersion, field.TypeString, value)
	}
	if value, ok := tu.mutation.ActionType(); ok {
		_spec.SetField(telemetry.FieldActionType, field.TypeString, value)
	}
	if value, ok := tu.mutation.ActionData(); ok {
		_spec.SetField(telemetry.FieldActionData, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.ActionAt(); ok {
		_spec.SetField(telemetry.FieldActionAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telemetry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TelemetryUpdateOne is the builder for updating a single Telemetry entity.
type TelemetryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelemetryMutation
}

// SetAppVersion sets the "app_version" field.
func (tuo *TelemetryUpdateOne) SetAppVersion(s string) *TelemetryUpdateOne {
	tuo.mutation.SetAppVersion(s)
	return tuo
}

// SetNillableAppVersion sets the "app_version" field if the given value is not nil.
func (tuo *TelemetryUpdateOne) SetNillableAppVersion(s *string) *TelemetryUpdateOne {
	if s != nil {
		tuo.SetAppVersion(*s)
	}
	return tuo
}

// SetOsVersion sets the "os_version" field.
func (tuo *TelemetryUpdateOne) SetOsVersion(s string) *TelemetryUpdateOne {
	tuo.mutation.SetOsVersion(s)
	return tuo
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (tuo *TelemetryUpdateOne) SetNillableOsVersion(s *string) *TelemetryUpdateOne {
	if s != nil {
		tuo.SetOsVersion(*s)
	}
	return tuo
}

// SetActionType sets the "action_type" field.
func (tuo *TelemetryUpdateOne) SetActionType(s string) *TelemetryUpdateOne {
	tuo.mutation.SetActionType(s)
	return tuo
}

// SetNillableActionType sets the "action_type" field if the given value is not nil.
func (tuo *TelemetryUpdateOne) SetNillableActionType(s *string) *TelemetryUpdateOne {
	if s != nil {
		tuo.SetActionType(*s)
	}
	return tuo
}

// SetActionData sets the "action_data" field.
func (tuo *TelemetryUpdateOne) SetActionData(m map[string]interface{}) *TelemetryUpdateOne {
	tuo.mutation.SetActionData(m)
	return tuo
}

// SetActionAt sets the "action_at" field.
func (tuo *TelemetryUpdateOne) SetActionAt(t time.Time) *TelemetryUpdateOne {
	tuo.mutation.SetActionAt(t)
	return tuo
}

// SetNillableActionAt sets the "action_at" field if the given value is not nil.
func (tuo *TelemetryUpdateOne) SetNillableActionAt(t *time.Time) *TelemetryUpdateOne {
	if t != nil {
		tuo.SetActionAt(*t)
	}
	return tuo
}

// Mutation returns the TelemetryMutation object of the builder.
func (tuo *TelemetryUpdateOne) Mutation() *TelemetryMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TelemetryUpdate builder.
func (tuo *TelemetryUpdateOne) Where(ps ...predicate.Telemetry) *TelemetryUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TelemetryUpdateOne) Select(field string, fields ...string) *TelemetryUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Telemetry entity.
func (tuo *TelemetryUpdateOne) Save(ctx context.Context) (*Telemetry, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TelemetryUpdateOne) SaveX(ctx context.Context) *Telemetry {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TelemetryUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TelemetryUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TelemetryUpdateOne) check() error {
	if _, ok := tuo.mutation.UserID(); tuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Telemetry.user"`)
	}
	if _, ok := tuo.mutation.DeviceID(); tuo.mutation.DeviceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Telemetry.device"`)
	}
	return nil
}

func (tuo *TelemetryUpdateOne) sqlSave(ctx context.Context) (_node *Telemetry, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(telemetry.Table, telemetry.Columns, sqlgraph.NewFieldSpec(telemetry.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Telemetry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telemetry.FieldID)
		for _, f := range fields {
			if !telemetry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telemetry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.AppVersion(); ok {
		_spec.SetField(telemetry.FieldAppVersion, field.TypeString, value)
	}
	if value, ok := tuo.mutation.OsVersion(); ok {
		_spec.SetField(telemetry.FieldOsVersion, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ActionType(); ok {
		_spec.SetField(telemetry.FieldActionType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.ActionData(); ok {
		_spec.SetField(telemetry.FieldActionData, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.ActionAt(); ok {
		_spec.SetField(telemetry.FieldActionAt, field.TypeTime, value)
	}
	_node = &Telemetry{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telemetry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
