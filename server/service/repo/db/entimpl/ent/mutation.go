// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/device"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/predicate"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/telemetry"
	"mobile-telemetry/server/service/repo/db/entimpl/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDevice    = "Device"
	TypeTelemetry = "Telemetry"
	TypeUser      = "User"
)

// DeviceMutation represents an operation that mutates the Device nodes in the graph.
type DeviceMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	manufacturer       *string
	model              *string
	build_number       *string
	os                 *string
	screen_width       *uint32
	addscreen_width    *int32
	screen_height      *uint32
	addscreen_height   *int32
	clearedFields      map[string]struct{}
	user               map[uuid.UUID]struct{}
	removeduser        map[uuid.UUID]struct{}
	cleareduser        bool
	telemetries        map[int]struct{}
	removedtelemetries map[int]struct{}
	clearedtelemetries bool
	done               bool
	oldValue           func(context.Context) (*Device, error)
	predicates         []predicate.Device
}

var _ ent.Mutation = (*DeviceMutation)(nil)

// deviceOption allows management of the mutation configuration using functional options.
type deviceOption func(*DeviceMutation)

// newDeviceMutation creates new mutation for the Device entity.
func newDeviceMutation(c config, op Op, opts ...deviceOption) *DeviceMutation {
	m := &DeviceMutation{
		config:        c,
		op:            op,
		typ:           TypeDevice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceID sets the ID field of the mutation.
func withDeviceID(id int) deviceOption {
	return func(m *DeviceMutation) {
		var (
			err   error
			once  sync.Once
			value *Device
		)
		m.oldValue = func(ctx context.Context) (*Device, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Device.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDevice sets the old Device of the mutation.
func withDevice(node *Device) deviceOption {
	return func(m *DeviceMutation) {
		m.oldValue = func(context.Context) (*Device, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DeviceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Device.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetManufacturer sets the "manufacturer" field.
func (m *DeviceMutation) SetManufacturer(s string) {
	m.manufacturer = &s
}

// Manufacturer returns the value of the "manufacturer" field in the mutation.
func (m *DeviceMutation) Manufacturer() (r string, exists bool) {
	v := m.manufacturer
	if v == nil {
		return
	}
	return *v, true
}

// OldManufacturer returns the old "manufacturer" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldManufacturer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManufacturer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManufacturer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManufacturer: %w", err)
	}
	return oldValue.Manufacturer, nil
}

// ResetManufacturer resets all changes to the "manufacturer" field.
func (m *DeviceMutation) ResetManufacturer() {
	m.manufacturer = nil
}

// SetModel sets the "model" field.
func (m *DeviceMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *DeviceMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *DeviceMutation) ResetModel() {
	m.model = nil
}

// SetBuildNumber sets the "build_number" field.
func (m *DeviceMutation) SetBuildNumber(s string) {
	m.build_number = &s
}

// BuildNumber returns the value of the "build_number" field in the mutation.
func (m *DeviceMutation) BuildNumber() (r string, exists bool) {
	v := m.build_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBuildNumber returns the old "build_number" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldBuildNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuildNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuildNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuildNumber: %w", err)
	}
	return oldValue.BuildNumber, nil
}

// ResetBuildNumber resets all changes to the "build_number" field.
func (m *DeviceMutation) ResetBuildNumber() {
	m.build_number = nil
}

// SetOs sets the "os" field.
func (m *DeviceMutation) SetOs(s string) {
	m.os = &s
}

// Os returns the value of the "os" field in the mutation.
func (m *DeviceMutation) Os() (r string, exists bool) {
	v := m.os
	if v == nil {
		return
	}
	return *v, true
}

// OldOs returns the old "os" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldOs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOs: %w", err)
	}
	return oldValue.Os, nil
}

// ResetOs resets all changes to the "os" field.
func (m *DeviceMutation) ResetOs() {
	m.os = nil
}

// SetScreenWidth sets the "screen_width" field.
func (m *DeviceMutation) SetScreenWidth(u uint32) {
	m.screen_width = &u
	m.addscreen_width = nil
}

// ScreenWidth returns the value of the "screen_width" field in the mutation.
func (m *DeviceMutation) ScreenWidth() (r uint32, exists bool) {
	v := m.screen_width
	if v == nil {
		return
	}
	return *v, true
}

// OldScreenWidth returns the old "screen_width" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldScreenWidth(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScreenWidth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScreenWidth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScreenWidth: %w", err)
	}
	return oldValue.ScreenWidth, nil
}

// AddScreenWidth adds u to the "screen_width" field.
func (m *DeviceMutation) AddScreenWidth(u int32) {
	if m.addscreen_width != nil {
		*m.addscreen_width += u
	} else {
		m.addscreen_width = &u
	}
}

// AddedScreenWidth returns the value that was added to the "screen_width" field in this mutation.
func (m *DeviceMutation) AddedScreenWidth() (r int32, exists bool) {
	v := m.addscreen_width
	if v == nil {
		return
	}
	return *v, true
}

// ResetScreenWidth resets all changes to the "screen_width" field.
func (m *DeviceMutation) ResetScreenWidth() {
	m.screen_width = nil
	m.addscreen_width = nil
}

// SetScreenHeight sets the "screen_height" field.
func (m *DeviceMutation) SetScreenHeight(u uint32) {
	m.screen_height = &u
	m.addscreen_height = nil
}

// ScreenHeight returns the value of the "screen_height" field in the mutation.
func (m *DeviceMutation) ScreenHeight() (r uint32, exists bool) {
	v := m.screen_height
	if v == nil {
		return
	}
	return *v, true
}

// OldScreenHeight returns the old "screen_height" field's value of the Device entity.
// If the Device object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceMutation) OldScreenHeight(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScreenHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScreenHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScreenHeight: %w", err)
	}
	return oldValue.ScreenHeight, nil
}

// AddScreenHeight adds u to the "screen_height" field.
func (m *DeviceMutation) AddScreenHeight(u int32) {
	if m.addscreen_height != nil {
		*m.addscreen_height += u
	} else {
		m.addscreen_height = &u
	}
}

// AddedScreenHeight returns the value that was added to the "screen_height" field in this mutation.
func (m *DeviceMutation) AddedScreenHeight() (r int32, exists bool) {
	v := m.addscreen_height
	if v == nil {
		return
	}
	return *v, true
}

// ResetScreenHeight resets all changes to the "screen_height" field.
func (m *DeviceMutation) ResetScreenHeight() {
	m.screen_height = nil
	m.addscreen_height = nil
}

// AddUserIDs adds the "user" edge to the User entity by ids.
func (m *DeviceMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.user == nil {
		m.user = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the User entity.
func (m *DeviceMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *DeviceMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the User entity by IDs.
func (m *DeviceMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removeduser == nil {
		m.removeduser = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.user, ids[i])
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the User entity.
func (m *DeviceMutation) RemovedUserIDs() (ids []uuid.UUID) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *DeviceMutation) UserIDs() (ids []uuid.UUID) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *DeviceMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// AddTelemetryIDs adds the "telemetries" edge to the Telemetry entity by ids.
func (m *DeviceMutation) AddTelemetryIDs(ids ...int) {
	if m.telemetries == nil {
		m.telemetries = make(map[int]struct{})
	}
	for i := range ids {
		m.telemetries[ids[i]] = struct{}{}
	}
}

// ClearTelemetries clears the "telemetries" edge to the Telemetry entity.
func (m *DeviceMutation) ClearTelemetries() {
	m.clearedtelemetries = true
}

// TelemetriesCleared reports if the "telemetries" edge to the Telemetry entity was cleared.
func (m *DeviceMutation) TelemetriesCleared() bool {
	return m.clearedtelemetries
}

// RemoveTelemetryIDs removes the "telemetries" edge to the Telemetry entity by IDs.
func (m *DeviceMutation) RemoveTelemetryIDs(ids ...int) {
	if m.removedtelemetries == nil {
		m.removedtelemetries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.telemetries, ids[i])
		m.removedtelemetries[ids[i]] = struct{}{}
	}
}

// RemovedTelemetries returns the removed IDs of the "telemetries" edge to the Telemetry entity.
func (m *DeviceMutation) RemovedTelemetriesIDs() (ids []int) {
	for id := range m.removedtelemetries {
		ids = append(ids, id)
	}
	return
}

// TelemetriesIDs returns the "telemetries" edge IDs in the mutation.
func (m *DeviceMutation) TelemetriesIDs() (ids []int) {
	for id := range m.telemetries {
		ids = append(ids, id)
	}
	return
}

// ResetTelemetries resets all changes to the "telemetries" edge.
func (m *DeviceMutation) ResetTelemetries() {
	m.telemetries = nil
	m.clearedtelemetries = false
	m.removedtelemetries = nil
}

// Where appends a list predicates to the DeviceMutation builder.
func (m *DeviceMutation) Where(ps ...predicate.Device) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DeviceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DeviceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Device, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DeviceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DeviceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Device).
func (m *DeviceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.manufacturer != nil {
		fields = append(fields, device.FieldManufacturer)
	}
	if m.model != nil {
		fields = append(fields, device.FieldModel)
	}
	if m.build_number != nil {
		fields = append(fields, device.FieldBuildNumber)
	}
	if m.os != nil {
		fields = append(fields, device.FieldOs)
	}
	if m.screen_width != nil {
		fields = append(fields, device.FieldScreenWidth)
	}
	if m.screen_height != nil {
		fields = append(fields, device.FieldScreenHeight)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case device.FieldManufacturer:
		return m.Manufacturer()
	case device.FieldModel:
		return m.Model()
	case device.FieldBuildNumber:
		return m.BuildNumber()
	case device.FieldOs:
		return m.Os()
	case device.FieldScreenWidth:
		return m.ScreenWidth()
	case device.FieldScreenHeight:
		return m.ScreenHeight()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case device.FieldManufacturer:
		return m.OldManufacturer(ctx)
	case device.FieldModel:
		return m.OldModel(ctx)
	case device.FieldBuildNumber:
		return m.OldBuildNumber(ctx)
	case device.FieldOs:
		return m.OldOs(ctx)
	case device.FieldScreenWidth:
		return m.OldScreenWidth(ctx)
	case device.FieldScreenHeight:
		return m.OldScreenHeight(ctx)
	}
	return nil, fmt.Errorf("unknown Device field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case device.FieldManufacturer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManufacturer(v)
		return nil
	case device.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case device.FieldBuildNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuildNumber(v)
		return nil
	case device.FieldOs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOs(v)
		return nil
	case device.FieldScreenWidth:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScreenWidth(v)
		return nil
	case device.FieldScreenHeight:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScreenHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceMutation) AddedFields() []string {
	var fields []string
	if m.addscreen_width != nil {
		fields = append(fields, device.FieldScreenWidth)
	}
	if m.addscreen_height != nil {
		fields = append(fields, device.FieldScreenHeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case device.FieldScreenWidth:
		return m.AddedScreenWidth()
	case device.FieldScreenHeight:
		return m.AddedScreenHeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case device.FieldScreenWidth:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScreenWidth(v)
		return nil
	case device.FieldScreenHeight:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScreenHeight(v)
		return nil
	}
	return fmt.Errorf("unknown Device numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Device nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceMutation) ResetField(name string) error {
	switch name {
	case device.FieldManufacturer:
		m.ResetManufacturer()
		return nil
	case device.FieldModel:
		m.ResetModel()
		return nil
	case device.FieldBuildNumber:
		m.ResetBuildNumber()
		return nil
	case device.FieldOs:
		m.ResetOs()
		return nil
	case device.FieldScreenWidth:
		m.ResetScreenWidth()
		return nil
	case device.FieldScreenHeight:
		m.ResetScreenHeight()
		return nil
	}
	return fmt.Errorf("unknown Device field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, device.EdgeUser)
	}
	if m.telemetries != nil {
		edges = append(edges, device.EdgeTelemetries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	case device.EdgeTelemetries:
		ids := make([]ent.Value, 0, len(m.telemetries))
		for id := range m.telemetries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser != nil {
		edges = append(edges, device.EdgeUser)
	}
	if m.removedtelemetries != nil {
		edges = append(edges, device.EdgeTelemetries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case device.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	case device.EdgeTelemetries:
		ids := make([]ent.Value, 0, len(m.removedtelemetries))
		for id := range m.removedtelemetries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, device.EdgeUser)
	}
	if m.clearedtelemetries {
		edges = append(edges, device.EdgeTelemetries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceMutation) EdgeCleared(name string) bool {
	switch name {
	case device.EdgeUser:
		return m.cleareduser
	case device.EdgeTelemetries:
		return m.clearedtelemetries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Device unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceMutation) ResetEdge(name string) error {
	switch name {
	case device.EdgeUser:
		m.ResetUser()
		return nil
	case device.EdgeTelemetries:
		m.ResetTelemetries()
		return nil
	}
	return fmt.Errorf("unknown Device edge %s", name)
}

// TelemetryMutation represents an operation that mutates the Telemetry nodes in the graph.
type TelemetryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	app_version   *string
	os_version    *string
	action_type   *string
	action_data   *map[string]interface{}
	action_at     *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	device        *int
	cleareddevice bool
	done          bool
	oldValue      func(context.Context) (*Telemetry, error)
	predicates    []predicate.Telemetry
}

var _ ent.Mutation = (*TelemetryMutation)(nil)

// telemetryOption allows management of the mutation configuration using functional options.
type telemetryOption func(*TelemetryMutation)

// newTelemetryMutation creates new mutation for the Telemetry entity.
func newTelemetryMutation(c config, op Op, opts ...telemetryOption) *TelemetryMutation {
	m := &TelemetryMutation{
		config:        c,
		op:            op,
		typ:           TypeTelemetry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTelemetryID sets the ID field of the mutation.
func withTelemetryID(id int) telemetryOption {
	return func(m *TelemetryMutation) {
		var (
			err   error
			once  sync.Once
			value *Telemetry
		)
		m.oldValue = func(ctx context.Context) (*Telemetry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Telemetry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTelemetry sets the old Telemetry of the mutation.
func withTelemetry(node *Telemetry) telemetryOption {
	return func(m *TelemetryMutation) {
		m.oldValue = func(context.Context) (*Telemetry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TelemetryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TelemetryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TelemetryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TelemetryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Telemetry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppVersion sets the "app_version" field.
func (m *TelemetryMutation) SetAppVersion(s string) {
	m.app_version = &s
}

// AppVersion returns the value of the "app_version" field in the mutation.
func (m *TelemetryMutation) AppVersion() (r string, exists bool) {
	v := m.app_version
	if v == nil {
		return
	}
	return *v, true
}

// OldAppVersion returns the old "app_version" field's value of the Telemetry entity.
// If the Telemetry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelemetryMutation) OldAppVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppVersion: %w", err)
	}
	return oldValue.AppVersion, nil
}

// ResetAppVersion resets all changes to the "app_version" field.
func (m *TelemetryMutation) ResetAppVersion() {
	m.app_version = nil
}

// SetOsVersion sets the "os_version" field.
func (m *TelemetryMutation) SetOsVersion(s string) {
	m.os_version = &s
}

// OsVersion returns the value of the "os_version" field in the mutation.
func (m *TelemetryMutation) OsVersion() (r string, exists bool) {
	v := m.os_version
	if v == nil {
		return
	}
	return *v, true
}

// OldOsVersion returns the old "os_version" field's value of the Telemetry entity.
// If the Telemetry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelemetryMutation) OldOsVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOsVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOsVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOsVersion: %w", err)
	}
	return oldValue.OsVersion, nil
}

// ResetOsVersion resets all changes to the "os_version" field.
func (m *TelemetryMutation) ResetOsVersion() {
	m.os_version = nil
}

// SetActionType sets the "action_type" field.
func (m *TelemetryMutation) SetActionType(s string) {
	m.action_type = &s
}

// ActionType returns the value of the "action_type" field in the mutation.
func (m *TelemetryMutation) ActionType() (r string, exists bool) {
	v := m.action_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActionType returns the old "action_type" field's value of the Telemetry entity.
// If the Telemetry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelemetryMutation) OldActionType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionType: %w", err)
	}
	return oldValue.ActionType, nil
}

// ResetActionType resets all changes to the "action_type" field.
func (m *TelemetryMutation) ResetActionType() {
	m.action_type = nil
}

// SetActionData sets the "action_data" field.
func (m *TelemetryMutation) SetActionData(value map[string]interface{}) {
	m.action_data = &value
}

// ActionData returns the value of the "action_data" field in the mutation.
func (m *TelemetryMutation) ActionData() (r map[string]interface{}, exists bool) {
	v := m.action_data
	if v == nil {
		return
	}
	return *v, true
}

// OldActionData returns the old "action_data" field's value of the Telemetry entity.
// If the Telemetry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelemetryMutation) OldActionData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionData: %w", err)
	}
	return oldValue.ActionData, nil
}

// ResetActionData resets all changes to the "action_data" field.
func (m *TelemetryMutation) ResetActionData() {
	m.action_data = nil
}

// SetActionAt sets the "action_at" field.
func (m *TelemetryMutation) SetActionAt(t time.Time) {
	m.action_at = &t
}

// ActionAt returns the value of the "action_at" field in the mutation.
func (m *TelemetryMutation) ActionAt() (r time.Time, exists bool) {
	v := m.action_at
	if v == nil {
		return
	}
	return *v, true
}

// OldActionAt returns the old "action_at" field's value of the Telemetry entity.
// If the Telemetry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TelemetryMutation) OldActionAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionAt: %w", err)
	}
	return oldValue.ActionAt, nil
}

// ResetActionAt resets all changes to the "action_at" field.
func (m *TelemetryMutation) ResetActionAt() {
	m.action_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *TelemetryMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *TelemetryMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *TelemetryMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *TelemetryMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *TelemetryMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *TelemetryMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetDeviceID sets the "device" edge to the Device entity by id.
func (m *TelemetryMutation) SetDeviceID(id int) {
	m.device = &id
}

// ClearDevice clears the "device" edge to the Device entity.
func (m *TelemetryMutation) ClearDevice() {
	m.cleareddevice = true
}

// DeviceCleared reports if the "device" edge to the Device entity was cleared.
func (m *TelemetryMutation) DeviceCleared() bool {
	return m.cleareddevice
}

// DeviceID returns the "device" edge ID in the mutation.
func (m *TelemetryMutation) DeviceID() (id int, exists bool) {
	if m.device != nil {
		return *m.device, true
	}
	return
}

// DeviceIDs returns the "device" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeviceID instead. It exists only for internal usage by the builders.
func (m *TelemetryMutation) DeviceIDs() (ids []int) {
	if id := m.device; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDevice resets all changes to the "device" edge.
func (m *TelemetryMutation) ResetDevice() {
	m.device = nil
	m.cleareddevice = false
}

// Where appends a list predicates to the TelemetryMutation builder.
func (m *TelemetryMutation) Where(ps ...predicate.Telemetry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TelemetryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TelemetryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Telemetry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TelemetryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TelemetryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Telemetry).
func (m *TelemetryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TelemetryMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.app_version != nil {
		fields = append(fields, telemetry.FieldAppVersion)
	}
	if m.os_version != nil {
		fields = append(fields, telemetry.FieldOsVersion)
	}
	if m.action_type != nil {
		fields = append(fields, telemetry.FieldActionType)
	}
	if m.action_data != nil {
		fields = append(fields, telemetry.FieldActionData)
	}
	if m.action_at != nil {
		fields = append(fields, telemetry.FieldActionAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TelemetryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case telemetry.FieldAppVersion:
		return m.AppVersion()
	case telemetry.FieldOsVersion:
		return m.OsVersion()
	case telemetry.FieldActionType:
		return m.ActionType()
	case telemetry.FieldActionData:
		return m.ActionData()
	case telemetry.FieldActionAt:
		return m.ActionAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TelemetryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case telemetry.FieldAppVersion:
		return m.OldAppVersion(ctx)
	case telemetry.FieldOsVersion:
		return m.OldOsVersion(ctx)
	case telemetry.FieldActionType:
		return m.OldActionType(ctx)
	case telemetry.FieldActionData:
		return m.OldActionData(ctx)
	case telemetry.FieldActionAt:
		return m.OldActionAt(ctx)
	}
	return nil, fmt.Errorf("unknown Telemetry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelemetryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case telemetry.FieldAppVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppVersion(v)
		return nil
	case telemetry.FieldOsVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOsVersion(v)
		return nil
	case telemetry.FieldActionType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionType(v)
		return nil
	case telemetry.FieldActionData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionData(v)
		return nil
	case telemetry.FieldActionAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionAt(v)
		return nil
	}
	return fmt.Errorf("unknown Telemetry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TelemetryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TelemetryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TelemetryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Telemetry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TelemetryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TelemetryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TelemetryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Telemetry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TelemetryMutation) ResetField(name string) error {
	switch name {
	case telemetry.FieldAppVersion:
		m.ResetAppVersion()
		return nil
	case telemetry.FieldOsVersion:
		m.ResetOsVersion()
		return nil
	case telemetry.FieldActionType:
		m.ResetActionType()
		return nil
	case telemetry.FieldActionData:
		m.ResetActionData()
		return nil
	case telemetry.FieldActionAt:
		m.ResetActionAt()
		return nil
	}
	return fmt.Errorf("unknown Telemetry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TelemetryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, telemetry.EdgeUser)
	}
	if m.device != nil {
		edges = append(edges, telemetry.EdgeDevice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TelemetryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case telemetry.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case telemetry.EdgeDevice:
		if id := m.device; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TelemetryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TelemetryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TelemetryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, telemetry.EdgeUser)
	}
	if m.cleareddevice {
		edges = append(edges, telemetry.EdgeDevice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TelemetryMutation) EdgeCleared(name string) bool {
	switch name {
	case telemetry.EdgeUser:
		return m.cleareduser
	case telemetry.EdgeDevice:
		return m.cleareddevice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TelemetryMutation) ClearEdge(name string) error {
	switch name {
	case telemetry.EdgeUser:
		m.ClearUser()
		return nil
	case telemetry.EdgeDevice:
		m.ClearDevice()
		return nil
	}
	return fmt.Errorf("unknown Telemetry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TelemetryMutation) ResetEdge(name string) error {
	switch name {
	case telemetry.EdgeUser:
		m.ResetUser()
		return nil
	case telemetry.EdgeDevice:
		m.ResetDevice()
		return nil
	}
	return fmt.Errorf("unknown Telemetry edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	clearedFields      map[string]struct{}
	devices            map[int]struct{}
	removeddevices     map[int]struct{}
	cleareddevices     bool
	telemetries        map[int]struct{}
	removedtelemetries map[int]struct{}
	clearedtelemetries bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddDeviceIDs adds the "devices" edge to the Device entity by ids.
func (m *UserMutation) AddDeviceIDs(ids ...int) {
	if m.devices == nil {
		m.devices = make(map[int]struct{})
	}
	for i := range ids {
		m.devices[ids[i]] = struct{}{}
	}
}

// ClearDevices clears the "devices" edge to the Device entity.
func (m *UserMutation) ClearDevices() {
	m.cleareddevices = true
}

// DevicesCleared reports if the "devices" edge to the Device entity was cleared.
func (m *UserMutation) DevicesCleared() bool {
	return m.cleareddevices
}

// RemoveDeviceIDs removes the "devices" edge to the Device entity by IDs.
func (m *UserMutation) RemoveDeviceIDs(ids ...int) {
	if m.removeddevices == nil {
		m.removeddevices = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.devices, ids[i])
		m.removeddevices[ids[i]] = struct{}{}
	}
}

// RemovedDevices returns the removed IDs of the "devices" edge to the Device entity.
func (m *UserMutation) RemovedDevicesIDs() (ids []int) {
	for id := range m.removeddevices {
		ids = append(ids, id)
	}
	return
}

// DevicesIDs returns the "devices" edge IDs in the mutation.
func (m *UserMutation) DevicesIDs() (ids []int) {
	for id := range m.devices {
		ids = append(ids, id)
	}
	return
}

// ResetDevices resets all changes to the "devices" edge.
func (m *UserMutation) ResetDevices() {
	m.devices = nil
	m.cleareddevices = false
	m.removeddevices = nil
}

// AddTelemetryIDs adds the "telemetries" edge to the Telemetry entity by ids.
func (m *UserMutation) AddTelemetryIDs(ids ...int) {
	if m.telemetries == nil {
		m.telemetries = make(map[int]struct{})
	}
	for i := range ids {
		m.telemetries[ids[i]] = struct{}{}
	}
}

// ClearTelemetries clears the "telemetries" edge to the Telemetry entity.
func (m *UserMutation) ClearTelemetries() {
	m.clearedtelemetries = true
}

// TelemetriesCleared reports if the "telemetries" edge to the Telemetry entity was cleared.
func (m *UserMutation) TelemetriesCleared() bool {
	return m.clearedtelemetries
}

// RemoveTelemetryIDs removes the "telemetries" edge to the Telemetry entity by IDs.
func (m *UserMutation) RemoveTelemetryIDs(ids ...int) {
	if m.removedtelemetries == nil {
		m.removedtelemetries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.telemetries, ids[i])
		m.removedtelemetries[ids[i]] = struct{}{}
	}
}

// RemovedTelemetries returns the removed IDs of the "telemetries" edge to the Telemetry entity.
func (m *UserMutation) RemovedTelemetriesIDs() (ids []int) {
	for id := range m.removedtelemetries {
		ids = append(ids, id)
	}
	return
}

// TelemetriesIDs returns the "telemetries" edge IDs in the mutation.
func (m *UserMutation) TelemetriesIDs() (ids []int) {
	for id := range m.telemetries {
		ids = append(ids, id)
	}
	return
}

// ResetTelemetries resets all changes to the "telemetries" edge.
func (m *UserMutation) ResetTelemetries() {
	m.telemetries = nil
	m.clearedtelemetries = false
	m.removedtelemetries = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.devices != nil {
		edges = append(edges, user.EdgeDevices)
	}
	if m.telemetries != nil {
		edges = append(edges, user.EdgeTelemetries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.devices))
		for id := range m.devices {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTelemetries:
		ids := make([]ent.Value, 0, len(m.telemetries))
		for id := range m.telemetries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddevices != nil {
		edges = append(edges, user.EdgeDevices)
	}
	if m.removedtelemetries != nil {
		edges = append(edges, user.EdgeTelemetries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDevices:
		ids := make([]ent.Value, 0, len(m.removeddevices))
		for id := range m.removeddevices {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTelemetries:
		ids := make([]ent.Value, 0, len(m.removedtelemetries))
		for id := range m.removedtelemetries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddevices {
		edges = append(edges, user.EdgeDevices)
	}
	if m.clearedtelemetries {
		edges = append(edges, user.EdgeTelemetries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeDevices:
		return m.cleareddevices
	case user.EdgeTelemetries:
		return m.clearedtelemetries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDevices:
		m.ResetDevices()
		return nil
	case user.EdgeTelemetries:
		m.ResetTelemetries()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
